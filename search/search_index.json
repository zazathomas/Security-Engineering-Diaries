{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This site serves as a repository for my thoughts, experiments, and insights on various topics within the tech landscape. My goal is to share my experiences to help others who might be on similar paths and provide practical insights for those looking to improve their skills in security, infrastructure, and beyond.</p>"},{"location":"#technical-content-spectrum","title":"Technical Content Spectrum","text":""},{"location":"#enterprise-security-architecture","title":"\ud83d\udd10 Enterprise Security Architecture","text":"<ul> <li>Security Tool Implementations: Architectural blueprints for deploying production-grade SIEM systems, Kubernetes-native security controllers (Kyverno/OPA Gatekeeper), and network intrusion detection stacks  </li> <li>Observability Engineering: Implementing centralized monitoring solutions with Prometheus/Grafana pipelines and cloud-native logging architectures  </li> </ul>"},{"location":"#cloud-infrastructure-design","title":"\u2638\ufe0f Cloud Infrastructure Design","text":"<ul> <li>Kubernetes Security Foundations: Secure cluster deployment methodologies using CIS-hardened configurations and CNCF-compliant toolchains  </li> <li>Virtualization Strategies: Performance-optimized bare-metal hypervisor implementations for development/staging environments  </li> </ul>"},{"location":"#production-grade-homelab-engineering","title":"\ud83c\udfe0 Production-Grade Homelab Engineering","text":"<ul> <li>Infrastructure-as-Code Environments: Terraform/Ansible templates for replicating enterprise network architectures in lab settings  </li> <li>Zero-Trust Lab Networks: Implementing identity-aware proxy configurations, VLAN segmentation, and authenticated service meshes  </li> </ul>"},{"location":"#cybersecurity-professional-development","title":"\ud83c\udf93 Cybersecurity Professional Development","text":"<ul> <li>Attack Simulation Labs: Purple team exercise environments with Caldera/Atomic Red Team integrations  </li> <li>Certification Preparation Systems: Automated CTF challenge generators and compliance-as-code audit frameworks  </li> </ul>"},{"location":"#entertainment","title":"\ud83d\udd79\ufe0f Entertainment","text":"<ul> <li>Retro-Tech Engineering Projects: ARM-based emulation stations and hardware-accelerated streaming rigs  </li> <li>Gaming &amp; Tech for Fun: Occasionally, I'll share insights on gaming setups, game server hosting, and how I use tech for entertainment and creativity.</li> </ul>"},{"location":"#join-me-on-this-journey","title":"Join Me on This Journey!","text":"<p>Whether you're a fellow cybersecurity professional, a tech hobbyist, or just someone curious about these topics, I hope you find something valuable here. Let\u2019s explore the tech landscape together, one blog post at a time.</p> <p>Feel free to connect with me and share your thoughts, questions, or ideas. Let's make this a collaborative space for knowledge-sharing and skill-building!</p> <p>Disclaimer: The content here reflects my personal journey and experiences in the cybersecurity and technology fields. While I aim to provide accurate and helpful information, please conduct your own research before implementing anything from this site in a production environment.</p>"},{"location":"about/","title":"Zaza Thomas | Security Engineer","text":""},{"location":"about/#specializing-in-devsecops-cloud-native-security","title":"Specializing in DevSecOps &amp; Cloud Native Security","text":""},{"location":"about/#professional-overview","title":"\ud83d\udc68\ud83d\udcbb Professional Overview","text":"<ul> <li>Specialization: DevSecOps, Cloud Native Security, Threat Modeling, Detection Engineering, Compliance</li> <li>Collaboration: Open to cybersecurity initiatives within the CNCF ecosystem</li> <li>Blog: Regular insights on Security Engineering Diaries</li> <li>Contact: LinkedIn</li> </ul>"},{"location":"about/#active-projects","title":"\ud83d\udee0\ufe0f Active Projects","text":"<ul> <li>Homelab: Infrastructure automation and security testing environment.</li> <li>Firewall-Updater: Dynamic firewall rule management tool.</li> <li>DevSecOps Pipeline: Secure CI/CD workflows with Jenkins.</li> <li>Compliance as Code: Automated policy enforcement frameworks.</li> <li>Detection Engineering: Threat detection rule development.</li> </ul>"},{"location":"about/#technical-expertise","title":"\ud83d\ude80 Technical Expertise","text":""},{"location":"about/#cloud-infrastructure","title":"Cloud &amp; Infrastructure","text":""},{"location":"about/#security-tools","title":"Security Tools","text":""},{"location":"about/#devops-automation","title":"DevOps &amp; Automation","text":""},{"location":"about/#languages-frameworks","title":"Languages &amp; Frameworks","text":""},{"location":"about/#github-analytics","title":"\ud83d\udcc8 GitHub Analytics","text":""},{"location":"about/#top-contributed-repo","title":"\ud83d\udd1d Top Contributed Repo","text":""},{"location":"about/#github-stats","title":"\ud83d\udcca GitHub Stats:","text":""},{"location":"about/#random-dev-quote","title":"\u270d\ufe0f Random Dev Quote","text":""},{"location":"tags/","title":"Tags","text":"<p>Posts by tags</p>"},{"location":"tags/#tag:homelab","title":"Homelab","text":"<ul> <li>            Why I Built a Homelab: A Security Engineer\u2019s Journey into Cloud-Native Mastery          </li> </ul>"},{"location":"tags/#tag:kamaji","title":"Kamaji","text":"<ul> <li>            Building a Resilient Hybrid Kubernetes Cluster: Cloud Control Planes and On-Prem Workers          </li> </ul>"},{"location":"tags/#tag:kubernetes","title":"Kubernetes","text":"<ul> <li>            Building a Resilient Hybrid Kubernetes Cluster: Cloud Control Planes and On-Prem Workers          </li> <li>            Why I Built a Homelab: A Security Engineer\u2019s Journey into Cloud-Native Mastery          </li> </ul>"},{"location":"tags/#tag:proxmox","title":"Proxmox","text":"<ul> <li>            Building a Resilient Hybrid Kubernetes Cluster: Cloud Control Planes and On-Prem Workers          </li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/","title":"Why I Built a Homelab: A Security Engineer\u2019s Journey into Cloud-Native Mastery","text":"<p>As a security engineer specializing in cloud-native environments, DevSecOps, and Kubernetes, my homelab isn\u2019t just a hobby\u2014it\u2019s a mission-critical sandbox where theory meets practice, and vulnerabilities meet solutions. Over the years, this lab has evolved from a humble single board mini PC to a sprawling hybrid ecosystem spanning my home and the public cloud. Here\u2019s why I built it, what I\u2019ve learned, and how it bridges my professional expertise with hands-on experimentation.</p>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#the-catalyst-why-a-homelab","title":"The Catalyst: Why a Homelab?","text":"<p>In cloud-native security, textbook knowledge only gets you so far. Real threats emerge in the gaps between design and deployment, and defending modern infrastructure demands fluency in the tools orchestrating it. My homelab became the proving ground where I could: - Simulate real-world attacks on containerized workloads. - Stress-test security controls like runtime monitoring, network policies, and CI/CD guardrails. - Master emerging tech (e.g., Cilium\u2019s Gateway API, eBPF-powered security) without risking production systems. - Automate my home while hardening IoT devices against lateral movement.</p> <p>But beyond upskilling, the lab taught me resilience. When a misconfigured firewall once locked me out of my managed OKE cluster, or a Kubernetes upgrade broke my entire ingress stack, those \"disasters\" became my best teachers.</p>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#the-architecture-hybrid-scalable-and-unapologetically-over-engineered","title":"The Architecture: Hybrid, Scalable, and Unapologetically Over-Engineered","text":"<p>My homelab is a blend of on-premises hardware and cloud resources, optimized for learning and redundancy:</p>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#1-virtualization-with-proxmox","title":"1. Virtualization with Proxmox","text":"<ul> <li>Why Proxmox? It\u2019s open-source, supports nested virtualization, and lets me mimic multi-tenant environments. I run clusters of lightweight VMs (Ubuntu/Debian) for Kubernetes nodes and isolated \"sacrificial\" labs for malware analysis.</li> <li>Key Learnings:</li> <li>Resource quotas prevent a misbehaving VM from starving others (critical for shared hardware).</li> <li>Snapshots are a double-edged sword\u2014great for rollbacks, but reliance on them can mask flawed automation.</li> </ul>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#2-containerization-kubernetes","title":"2. Containerization &amp; Kubernetes","text":"<ul> <li>Docker: My gateway to containers. I containerized everything\u2014from legacy apps to home automation services\u2014to practice vulnerability scanning and least-privilege principles.</li> <li>Kubernetes: The crown jewel. My hybrid cluster combines:</li> <li>On-prem nodes: Virtual kubernetes workers on my proxmox cluster.</li> <li>Oracle Cloud Always-Free Tier: A cloud-based kamaji control plane spanning 2 availability zones.</li> <li>Security Tools:<ul> <li>Kyverno for policy-as-code (e.g., blocking privileged pods).</li> <li>Falco and Tetragon for runtime threat detection.</li> <li>NeuVector for zero-trust container security, enforcing network policies and continuous monitoring for kuberneetes clusters.</li> <li>Cilium for network policies and replacing legacy ingress with Cilium Gateway API (a game-changer for L7 routing).</li> </ul> </li> </ul>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#3-observability-incident-response","title":"3. Observability &amp; Incident Response","text":"<ul> <li>Prometheus and Grafana: The backbone of my monitoring stack. Prometheus scrapes metrics from Kubernetes, Proxmox, and even IoT devices, while Grafana dashboards visualize everything from node resource usage to API latency.</li> <li>Wazuh: My SIEM (Security Information and Event Management) tool, aggregating logs from Kubernetes, Docker, and network devices. It triggers alerts for suspicious activity, like unexpected privilege escalation in pods.</li> <li>n8n: Repurposed as a lightweight SOAR (Security Orchestration, Automation, and Response) platform. It automates responses to common alerts\u2014e.g., quarantining a compromised VM via Proxmox\u2019s API or blocking an IP in AdGuard Home.</li> </ul>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#4-identity-access-management","title":"4. Identity &amp; Access Management","text":"<ul> <li> <p>Keycloak: Centralized identity provider managing authentication flows for ArgoCD, Grafana, and media services. Integrated with Kubernetes through OIDC claim mapping, enforcing group-based RBAC policies across environments.</p> </li> <li> <p>Teleport: Identity-native infrastructure access platform providing:</p> <ul> <li>Zero-Trust Kubernetes Access: Short-lived X.509 certificates replacing static kubeconfig files, authenticated via Keycloak OIDC integration</li> <li>Unified Audit Trail: Session recording with ASN.1 BER-encoded audit logs for forensic-ready SSH/K8s access histories</li> <li>Just-in-Time Permissions: Time-bound role activation through Keycloak identity assertions (e.g., temporary cluster-admin during incidents)</li> </ul> </li> <li> <p>SPIFFE/SPIRE: Workload identity federation across hybrid clusters, enabling:</p> <ul> <li>Automated mTLS certificate issuance for service-to-service communication</li> <li>Fine-grained attestation policies based on kernel measurements</li> </ul> </li> </ul>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#5-devsecops-gitops-automation-framework","title":"5. DevSecOps &amp; GitOps Automation Framework","text":"<ul> <li> <p>ArgoCD: Core GitOps controller enforcing security-first deployment practices:  </p> <ul> <li>Policy-as-Code Gates: Integrated OPA/Gatekeeper checks validating resource constraints pre-sync  </li> <li>Audit-Ready Versioning: Immutable Git commit-triggered deployments with signed Kustomize manifests  </li> <li>SSO-Enabled Governance: Keycloak-integrated RBAC controlling environment promotions (dev \u2192 staging \u2192 prod)  </li> </ul> </li> <li> <p>Akto API Security: Shift-left API protection framework implementing automated OpenAPI spec validation during CI builds  </p> </li> <li> <p>DefectDojo: Unified vulnerability management platform providing:  </p> <ul> <li>Aggregated Risk Scoring: Correlation of SAST/DAST/SCA findings across microservices  </li> <li>Compliance Mapping: NIST 800-53 control alignment for critical vulnerabilities  </li> <li>Automated Remediation: GitLab MR generation with patched dependencies via Dependabot integration  </li> </ul> </li> </ul>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#6-data-event-streaming","title":"6. Data &amp; Event Streaming","text":"<ul> <li> <p>Kafka Event Mesh: Mission-critical nervous system for security operations:  </p> <ul> <li>Incident Forensics: Immutable audit log retention for SOC2-compliant event replay  </li> <li>Workflow Choreography: Triggering automated responses via Knative Functions (e.g., quarantine workflows)  </li> </ul> </li> <li> <p>MinIO Object Storage: S3-compatible backbone for:  </p> <ul> <li>Artifact Registry: Secure storage of static files and SBOM archives  </li> <li>Immutable Backups: Write-Once-Read-Many (WORM) policies for Velero cluster snapshots with cross instance replication.</li> </ul> </li> <li> <p>Kopia Enterprise-Grade DR: Cross-platform recovery solution featuring:  </p> <ul> <li>Hybrid Cloud Backups: Unified policy management for local/Oracle Cloud storage targets  </li> <li>Military-Grade Encryption: AES-256-GCM protected backups with Keycloak-managed keys  </li> <li>Ransomware Resilience: Air-gapped backups via automated MinIO bucket isolation triggers  </li> </ul> </li> </ul>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#7-networking-data-flow","title":"7. Networking &amp; Data Flow","text":"<ul> <li>AdGuard Home: Blocks ads/malware at the DNS layer, with custom rules to silence chatty IoT devices. Integrated with Prometheus to log query trends.</li> <li>Traefik &amp; Cilium Gateway API: Traefik handles TLS termination for public-facing apps, while Cilium Gateway API manages internal L7 routing (e.g., gRPC traffic between microservices).</li> <li>Kafka: Acts as the message broker for event-driven workflows. For example, IoT sensor data streams into Kafka, processed by Flink for anomaly detection, and stored in TimescaleDB.</li> </ul>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#8-home-automation-media","title":"8. Home Automation &amp; Media","text":"<ul> <li>Home Assistant: Runs in a Kubernetes pod, with Zigbee2MQTT and Node-RED automating lights, HVAC, and security cameras.</li> <li>Media Server Stack: Jellyfin for streaming, backed by RAID-Z2 storage in Proxmox. Secured with Keycloak authentication and NeuVector network policies to isolate it from other services.</li> </ul>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#key-learnings-and-mistakes","title":"Key Learnings (and Mistakes)","text":"<ol> <li>DevSecOps Isn\u2019t Just Tools\u2014It\u2019s Culture:</li> <li>Automating security checks in CI/CD (e.g., Trivy scans, Terraform policy enforcement) caught misconfigurations early.</li> <li> <p>But without documenting why a policy exists (e.g., blocking <code>latest</code> tags), teams bypass them.</p> </li> <li> <p>Containers \u2260 Security:</p> </li> <li>Even with rootless containers, a compromised app can exploit kernel vulnerabilities.</li> <li> <p>Solution: Regular <code>gVisor</code> sandboxing trials and seccomp profiles tailored to each workload.</p> </li> <li> <p>Power Outages Are the Ultimate Test:</p> </li> <li> <p>After a 12-hour blackout corrupted my local storage, I adopted a 3-2-1 backup rule:</p> <ul> <li>3 copies of data (local, Oracle Cloud, and Cloudflare R2).</li> <li>2 formats (raw disks and containerized volumes).</li> <li>1 air-gapped backup (an offline SSD updated monthly).</li> </ul> </li> <li> <p>Documentation Is Survival:</p> </li> <li>My early \"I\u2019ll remember how this works\" phase led to days of reverse-engineering my own setups. Now, everything is codified in IaC (Terraform + Ansible) and well documented on Obsidian.</li> </ol>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#whats-next","title":"What\u2019s Next?","text":"<ul> <li>eBPF Deep Dive: Expanding Cilium\u2019s security audits using Hubble for network observability.</li> <li>Zero Trust for IoT: Implementing SPIFFE identities for smart devices to authenticate to Home Assistant.</li> <li>Chaos Engineering: Automating cluster failure simulations with Chaos Mesh to validate backups and policies.</li> </ul>","tags":["Kubernetes","Homelab"]},{"location":"blog/why-i-built-a-homelab-a-security-engineers-journey-into-cloud-native-mastery/#conclusion-why-this-all-matters","title":"Conclusion: Why This All Matters","text":"<p>For security engineers, a homelab isn\u2019t about the tech\u2014it\u2019s about cultivating a mindset. By breaking (and fixing) things in a controlled environment, I\u2019ve learned to: - Anticipate attack vectors in cloud-native tooling. - Balance security with usability (no, not every pod needs a <code>securityContext</code> with <code>drop: ALL</code>). - Respect the shared responsibility model: Cloud providers secure infrastructure; we secure workloads.</p> <p>If you\u2019re in tech, build a lab. Let it break. Learn from it. Because the next zero-day or misconfigured S3 bucket you thwart might just owe its defeat to the lessons learned in your basement at 2 a.m.</p>","tags":["Kubernetes","Homelab"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/","title":"Building a Resilient Hybrid Kubernetes Cluster: Cloud Control Planes and On-Prem Workers","text":"<p>In today\u2019s dynamic infrastructure landscape, balancing scalability, cost-efficiency, and security is paramount. A hybrid Kubernetes cluster\u2014combining a managed cloud control plane with on-premises worker nodes\u2014offers the best of both worlds. This guide walks you through my journey of creating a fault-tolerant homelab Kubernetes cluster using Kamaji to host the control plane in Oracle Container Engine (OKE) and worker nodes on my Proxmox homelab.</p>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#why-go-hybrid","title":"Why Go Hybrid?","text":"<p>Before diving into the technical steps, let\u2019s unpack the advantages of this architecture:</p> <ul> <li>Fault Tolerance: Distribute workloads across cloud and on-premises nodes to mitigate single-point failures.</li> <li>Disaster Recovery: Rapidly reprovision on-prem nodes using templates while relying on the cloud\u2019s resilient control plane.</li> <li>Security &amp; Compliance: Keep sensitive data on-premises with strict access controls while leveraging the cloud\u2019s managed security for the control plane.</li> <li>Cost Optimization: Reduce cloud spend by running worker nodes locally while avoiding the complexity of self-hosting the control plane.</li> </ul>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#step-1-deploying-kamaji-for-control-plane-management","title":"Step 1: Deploying Kamaji for Control Plane Management","text":"<p>Kamaji is a Kubernetes operator that decouples the control plane from worker nodes, allowing you to host lightweight, multi-tenant control planes in a centralized management cluster. Here\u2019s how to set it up.</p>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#prerequisites","title":"Prerequisites","text":"<ul> <li>A functional Kubernetes cluster (e.g., OKE, EKS, or a local cluster) with a default <code>StorageClass</code>.</li> <li>Helm, kubectl, and kubeadm installed on your workstation.</li> </ul>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#install-cert-manager","title":"Install Cert-Manager","text":"<p>Kamaji requires Cert-Manager for TLS certificate management. Install it using Helm:</p> <pre><code>helm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm install cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --set installCRDs=true\n</code></pre>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#install-kamaji","title":"Install Kamaji","text":"<ol> <li> <p>Add &amp; Update the Clastix Helm repository:    <pre><code>helm repo add clastix https://clastix.github.io/charts\nhelm repo update\n</code></pre></p> </li> <li> <p>Clone the Kamaji repository and deploy:    <pre><code>git clone https://github.com/clastix/kamaji\ncd kamaji\nhelm dependency build charts/kamaji\nhelm install kamaji charts/kamaji \\\n  -n kamaji-system \\\n  --create-namespace \\\n  --set image.tag=latest  # Use a specific tag for production\n</code></pre></p> </li> <li> <p>Verify the installation:    <pre><code>helm status kamaji -n kamaji-system\n</code></pre></p> </li> </ol>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#optional-install-the-kamaji-console","title":"(Optional) Install the Kamaji Console","text":"<p>For a visual management interface, deploy the Kamaji Console. First, create a <code>console-secret.yaml</code> file:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: kamaji-console\n  namespace: kamaji-system\ntype: Opaque\ndata:\n  ADMIN_EMAIL: &lt;base64-encoded-email&gt;      # e.g., echo \"admin@example.com\" | base64\n  ADMIN_PASSWORD: &lt;base64-encoded-password&gt;\n  JWT_SECRET: &lt;base64-encoded-random-string&gt;  # Generate with openssl rand -hex 32\n  NEXTAUTH_URL: &lt;base64-encoded-url&gt;       # e.g., https://kamaji-console.example.com/ui\n</code></pre> <p>Apply the secret and deploy the console:</p> <pre><code>kubectl apply -f console-secret.yaml\nhelm -n kamaji-system install console clastix/kamaji-console --set replicaCount=1\n</code></pre> <p>Access the console via port-forwarding or an ingress controller using the credentials from the secret.</p>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#step-2-deploying-a-tenant-control-plane","title":"Step 2: Deploying a Tenant Control Plane","text":"<p>With Kamaji operational, create a tenant control plane (TCP) to manage your workload cluster.</p> <ol> <li>Apply a TCP manifest (e.g. tcp-template.yaml):    <pre><code>export TENANT_NAMESPACE=&lt;specify namespace control plane is deployed&gt;\nexport TENANT_NAME=&lt;specify control plane name&gt;\nkubectl apply -f tcp-template.yaml -n ${TENANT_NAMESPACE}\n</code></pre></li> <li> <p>Ensure the tenant control plane is operational:    <pre><code>watch kubectl get tcp -n ${TENANT_NAMESPACE} ${TENANT_NAME}\n</code></pre></p> </li> <li> <p>Retrieve the kubeconfig for your tenant cluster:    <pre><code>kubectl get secret -n ${TENANT_NAMESPACE} ${TENANT_NAME}-admin-kubeconfig -o jsonpath='{.data.admin\\.conf}' | base64 -d &gt; ${TENANT_NAME}-admin.kubeconfig\n</code></pre></p> </li> </ol>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#step-3-provisioning-on-premises-worker-nodes-on-proxmox","title":"Step 3: Provisioning On-Premises Worker Nodes on Proxmox","text":"","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#automate-node-bootstrap-with-yaki","title":"Automate Node Bootstrap with Yaki","text":"<p>Yaki simplifies Kubernetes node provisioning. Use my customized yaki script to prepare Ubuntu 22.04/24.04 VMs:</p> <pre><code># Install dependencies and bootstrap the node\nsudo apt install conntrack socat -y\ncurl -sfL https://raw.githubusercontent.com/zazathomas/Homelab/main/K8s/kamaji/yaki.sh &gt; yaki.sh &amp;&amp; chmod +x yaki.sh\nsudo KUBERNETES_VERSION=v1.31.4 ./yaki.sh bootstrap\nrm yaki.sh\n</code></pre> <p>Pro Tip: After configuring a VM, convert it to a Proxmox template for rapid cloning.</p>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#step-4-joining-workers-to-the-cluster","title":"Step 4: Joining Workers to the Cluster","text":"<ol> <li> <p>Retrieve the Join Command:    <pre><code>JOIN_CMD=$(sudo kubeadm --kubeconfig=${TENANT_NAME}-admin.kubeconfig token create --print-join-command)\n</code></pre></p> </li> <li> <p>Execute the Command on Each Worker:    <pre><code>WORKERS=(\"192.168.0.231\" \"192.168..0.232\" \"192.168..0.233\") # Replace this with your worker IPs\nfor WORKER_IP in \"${WORKERS[@]}\"; do\n  ssh user@$WORKER_IP -t \"sudo $JOIN_CMD\"\ndone\n</code></pre></p> </li> </ol>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#step-5-installing-core-cluster-components","title":"Step 5: Installing Core Cluster Components","text":"<p>After workers join, deploy these essentials:</p> <ol> <li> <p>CNI Plugin (e.g., Cilium):    <pre><code>helm repo add cilium https://helm.cilium.io/\nhelm install cilium cilium/cilium --version 1.17.1 --namespace kube-system --set k8sServiceHost=&lt;kube-api-server&gt;\n</code></pre></p> </li> <li> <p>Storage Provider (e.g. Longhorn):    <pre><code>helm repo add longhorn https://charts.longhorn.io\nhelm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version 1.8.1\n</code></pre></p> </li> <li> <p>Metrics Server:    <pre><code>kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n</code></pre></p> </li> </ol>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#final-steps-validation","title":"Final Steps: Validation","text":"<p>Verify cluster health:</p> <pre><code>kubectl --kubeconfig=${TENANT_NAME}-admin.kubeconfig get nodes\n</code></pre> <p>Ensure all nodes show <code>Ready</code> status, and deploy a test workload:</p> <pre><code>kubectl --kubeconfig=${TENANT_NAME}-admin.kubeconfig run nginx --image=nginx --port=80\n</code></pre>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/building-a-resilient-hybrid-kubernetes-cluster-cloud-control-planes-and-on-prem-workers/#conclusion","title":"Conclusion","text":"<p>You\u2019ve now built a hybrid Kubernetes cluster that merges the reliability of a managed cloud control plane with the flexibility of on-premises workers. This setup is ideal for homelabs or edge computing scenarios where data sovereignty and cost control are priorities.</p> <p>Next Steps:</p> <ul> <li> <p>Explore Kamaji\u2019s multi-tenancy features for isolating workloads.</p> </li> <li> <p>Implement a CI/CD pipeline to deploy applications across hybrid nodes.</p> </li> <li> <p>Set up monitoring with Prometheus and Grafana.</p> </li> </ul> <p>By embracing hybrid Kubernetes, you\u2019re future-proofing your infrastructure\u2014one cluster at a time. \ud83d\ude80</p>","tags":["Kubernetes","Proxmox","Kamaji"]},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/homelab/","title":"Homelab","text":""},{"location":"blog/category/cloud-security/","title":"Cloud Security","text":""}]}